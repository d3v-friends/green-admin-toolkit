"use client";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useEffect, useState, } from "react";
import { fnCss } from "nextjs-tools";
import Image from "next/image";
import ImgCross from "web-asset/svg/regular/fi-rr-cross.svg";
export default function ({ placeholder = "", imgSrc, regexp, invalidMessage, defaultValue = "", onChange = () => { }, onKeyEnter = () => { }, name, disabled, className = "", autoComplete, inputMode, type, required, label, inputParser = (e) => e.target.value, children, }) {
    const [invalid, setInvalid] = useState(false);
    const [value, setValue] = useState(defaultValue);
    const [focus, setFocus] = useState(false);
    useEffect(() => {
        setValue(defaultValue);
    }, [defaultValue]);
    const onKeyDownHandler = (e) => {
        if (e.key !== "Enter")
            return;
        onKeyEnter(value);
    };
    const onChangeHandler = (e) => {
        const str = inputParser(e);
        onChange(str);
        setValue(str);
        setInvalid(!new RegExp(regexp || "").test(str));
    };
    return (_jsxs("div", { className: className, children: [label && _jsx("p", { className: "mb-[-5px]", children: label }), _jsxs("div", { className: "flex w-full items-top", children: [_jsxs("div", { className: fnCss.sum("relative", "flex items-center border-all rounded-md h-[2.5rem] overflow-hidden", "grow", focus ? "border-(--primary)" : "", invalid && value ? "border-(--danger)" : ""), children: [imgSrc && (_jsx("div", { className: fnCss.sum("border-right h-full flex pl-2 pr-2", disabled ? "bg-(--dark)" : "bg-(--primary)", focus ? "border-(--primary)" : ""), children: _jsx(Image, { className: fnCss.sum("no-drag", disabled ? "filter-(--dark-alt-filter)" : "filter-(--primary-alt-filter)"), src: imgSrc, alt: "icon", width: 25, height: 25 }) })), _jsx("input", { placeholder, disabled, name, autoComplete, inputMode, type, required, onChange: onChangeHandler, className: "outline-none w-full pl-2 pr-2 grow", onKeyDown: onKeyDownHandler, onFocus: () => setFocus(true), onBlur: () => setFocus(false), value: value, title: invalidMessage }), value && (_jsx(Image, { src: ImgCross, alt: "clear", width: 20, height: 20, onClick: () => {
                                    setValue("");
                                    onChange("");
                                }, className: "absolute right-0 top-0 h-[2.5rem] no-drag mr-2 filter-(--text-2-filter) hover:filter-(--primary-filter)" }))] }), children && _jsx("div", { className: "ml-2", children: children })] }), _jsx("div", { className: "min-h-[1.5rem] pl-2 text-(--danger)", children: invalid && invalidMessage })] }));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcC9mb3JtL2lucHV0LXN0cmluZy9pbmRleC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOztBQUNiLE9BQWMsRUFNYixTQUFTLEVBQ1QsUUFBUSxHQUNSLE1BQU0sT0FBTyxDQUFDO0FBQ2YsT0FBTyxFQUFTLEtBQUssRUFBaUMsTUFBTSxjQUFjLENBQUM7QUFDM0UsT0FBTyxLQUFLLE1BQU0sWUFBWSxDQUFDO0FBQy9CLE9BQU8sUUFBUSxNQUFNLHVDQUF1QyxDQUFDO0FBdUI3RCxNQUFNLENBQUMsT0FBTyxXQUFXLEVBQ3hCLFdBQVcsR0FBRyxFQUFFLEVBQ2hCLE1BQU0sRUFDTixNQUFNLEVBQ04sY0FBYyxFQUNkLFlBQVksR0FBRyxFQUFFLEVBQ2pCLFFBQVEsR0FBRyxHQUFHLEVBQUUsR0FBRSxDQUFDLEVBQ25CLFVBQVUsR0FBRyxHQUFHLEVBQUUsR0FBRSxDQUFDLEVBQ3JCLElBQUksRUFDSixRQUFRLEVBQ1IsU0FBUyxHQUFHLEVBQUUsRUFDZCxZQUFZLEVBQ1osU0FBUyxFQUNULElBQUksRUFDSixRQUFRLEVBQ1IsS0FBSyxFQUNMLFdBQVcsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQ25DLFFBQVEsR0FDUztJQUNqQixNQUFNLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM5QyxNQUFNLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNqRCxNQUFNLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUUxQyxTQUFTLENBQUMsR0FBRyxFQUFFO1FBQ2QsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFD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